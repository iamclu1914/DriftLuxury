import React, { useState, useEffect } from 'react';
import axios from 'axios';
import EnhancedItinerary from './EnhancedItinerary';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const TripMode = () => {
  const [activeTab, setActiveTab] = useState('search');
  const [tripType, setTripType] = useState('roundtrip');
  
  const [searchData, setSearchData] = useState({
    origin: '',
    destination: '',
    departureDate: '',
    returnDate: '',
    adults: 1,
    children: 0,
    travelClass: 'ECONOMY',
    flexible: false
  });

  const [smartFeatures, setSmartFeatures] = useState({
    sustainabilityMode: false,
    budgetIntelligence: true,
    moodBasedSuggestions: true,
    localInsights: true,
    priceAlerts: false,
    collaborativePlanning: false
  });

  const [flightResults, setFlightResults] = useState([]);
  const [loading, setLoading] = useState({ flights: false, insights: false, plan: false });
  const [error, setError] = useState(null);
  const [smartRecommendations, setSmartRecommendations] = useState([]);
  const [carbonData, setCarbonData] = useState(null);
  const [tripPlanResults, setTripPlanResults] = useState(null);

  const [showFlightDetails, setShowFlightDetails] = useState(false);
  const [selectedFlightForDetails, setSelectedFlightForDetails] = useState(null);

  const [tripBudget, setTripBudget] = useState({
    total: '',
    flights: 40,
    hotels: 35,
    activities: 15,
    food: 10
  });

  const [filters, setFilters] = useState({
    price: { min: '', max: '' },
    stops: 'all',
    timeOfDay: 'all',
    sustainability: false,
    sortBy: 'price'
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setSearchData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSmartFeatureToggle = (feature) => {
    setSmartFeatures(prev => ({
      ...prev,
      [feature]: !prev[feature]
    }));
  };

  const searchFlights = async () => {
    setLoading(prev => ({ ...prev, flights: true }));
    setError(null);
    
    // Validate required fields
    if (!searchData.origin || !searchData.destination) {
      setError('Please enter both origin and destination airports or cities.');
      setLoading(prev => ({ ...prev, flights: false }));
      return;
    }
    
    if (!searchData.departureDate) {
      setError('Please select a departure date.');
      setLoading(prev => ({ ...prev, flights: false }));
      return;
    }
    
    if (tripType === 'roundtrip' && !searchData.returnDate) {
      setError('Please select a return date for round-trip flights.');
      setLoading(prev => ({ ...prev, flights: false }));
      return;
    }
    
    try {
      const searchParams = {
        ...searchData,
        smart_features: smartFeatures,
        budget_context: tripBudget.total ? {
          total: tripBudget.total,
          flight_percentage: tripBudget.flights
        } : null
      };

      const response = await axios.post(`${API}/flights/search-smart`, searchParams);
      
      if (response.data.success) {
        setFlightResults(response.data.flights);
        setCarbonData(response.data.carbon_data);
        setSmartRecommendations(response.data.recommendations);
        setActiveTab('compare');
      }
    } catch (err) {
      console.error('Flight search error:', err);
      let errorMessage = 'Failed to search flights';
      
      if (err.response?.data?.detail) {
        errorMessage = err.response.data.detail;
      } else if (err.response?.status === 400) {
        errorMessage = 'Invalid search parameters. Please check your dates and locations.';
      } else if (err.response?.status === 500) {
        errorMessage = 'Service temporarily unavailable. Please try again with dates in July 2025 or later.';
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      setError(errorMessage);
    } finally {
      setLoading(prev => ({ ...prev, flights: false }));
    }
  };

  const planTrip = async () => {
    setLoading(prev => ({ ...prev, plan: true }));
    setError(null);
    
    try {
      const tripData = {
        destination: searchData.destination,
        departure_date: searchData.departureDate,
        return_date: searchData.returnDate,
        budget: tripBudget.total,
        travelers: {
          adults: searchData.adults,
          children: searchData.children
        },
        preferences: {
          sustainability_mode: smartFeatures.sustainabilityMode,
          mood_based_suggestions: smartFeatures.moodBasedSuggestions,
          local_insights: smartFeatures.localInsights,
          budget_intelligence: smartFeatures.budgetIntelligence
        }
      };

      const response = await axios.post(`${API}/trips/plan-and-book`, tripData);
      
      if (response.data.success) {
        setTripPlanResults(response.data);
        setActiveTab('plan');
      }
    } catch (err) {
      setError(err.response?.data?.detail || 'Failed to plan trip');
    } finally {
      setLoading(prev => ({ ...prev, plan: false }));
    }
  };

  const formatPrice = (price) => {
    if (!price) return 'Price unavailable';
    const total = price.grandTotal || price.total || '0';
    const currency = price.currency || 'USD';
    return `${currency} ${parseFloat(total).toFixed(2)}`;
  };

  const formatDuration = (duration) => {
    if (!duration) return 'Duration unknown';
    return duration.replace('PT', '').replace('H', 'h ').replace('M', 'm');
  };

  const getSustainabilityColor = (score) => {
    if (score >= 80) return 'text-green-600 bg-green-100';
    if (score >= 60) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const getBudgetFitColor = (budgetFit) => {
    switch (budgetFit) {
      case 'excellent': return 'text-green-600 bg-green-100';
      case 'good': return 'text-blue-600 bg-blue-100';
      case 'over_budget': return 'text-orange-600 bg-orange-100';
      case 'too_expensive': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const filteredFlights = flightResults.filter(flight => {
    if (filters.stops !== 'all') {
      if (filters.stops === 'nonstop' && flight.stops !== 0) return false;
      if (filters.stops === '1stop' && flight.stops !== 1) return false;
      if (filters.stops === '2+stops' && flight.stops < 2) return false;
    }
    
    if (filters.sustainability && (!flight.sustainability_score || flight.sustainability_score < 70)) {
      return false;
    }
    
    if (filters.price.min) {
      const price = parseFloat(flight.price?.grandTotal || '0');
      if (price < parseFloat(filters.price.min)) return false;
    }
    
    if (filters.price.max) {
      const price = parseFloat(flight.price?.grandTotal || '0');
      if (price > parseFloat(filters.price.max)) return false;
    }
    
    return true;
  });

  const sortedFlights = [...filteredFlights].sort((a, b) => {
    switch (filters.sortBy) {
      case 'price':
        return parseFloat(a.price?.grandTotal || '0') - parseFloat(b.price?.grandTotal || '0');
      case 'duration':
        return (a.stops || 0) - (b.stops || 0);
      case 'sustainability':
        return (b.sustainability_score || 0) - (a.sustainability_score || 0);
      case 'departure':
        return (a.departure_time || '').localeCompare(b.departure_time || '');
      default:
        return 0;
    }
  });

  return (
    <div>
        <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
        <div className="container mx-auto px-4 py-6">
        
        {/* Enhanced Header with Glassmorphism */}
        <div className="relative overflow-hidden rounded-3xl mb-8 shadow-2xl">
          {/* Animated Background */}
          <div className="absolute inset-0 bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 opacity-90"></div>
          <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width%3D%2260%22%20height%3D%2260%22%20viewBox%3D%220%200%2060%2060%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cg%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cg%20fill%3D%22%23ffffff%22%20fill-opacity%3D%220.1%22%3E%3Ccircle%20cx%3D%2230%22%20cy%3D%2230%22%20r%3D%224%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-20"></div>
          
          <div className="relative bg-white/10 backdrop-blur-lg border border-white/20">
            <div className="p-8">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-5xl font-bold text-white mb-2 tracking-tight">
                    ✈️ Smart Trip Planner
                  </h2>
                  <p className="text-blue-100 text-xl font-medium">
                    Plan smarter • Travel better • Experience more
                  </p>
                </div>
                <div className="hidden lg:flex items-center space-x-4">
                  <div className="bg-white/20 backdrop-blur-sm rounded-2xl px-6 py-3 border border-white/30">
                    <div className="text-white/90 text-sm font-medium">Powered by AI</div>
                    <div className="text-white text-lg font-bold">Real-time data</div>
                  </div>
                </div>
              </div>
              
              {/* Enhanced Tab Navigation */}
              <div className="flex flex-wrap gap-3">
                {[
                  { id: 'search', icon: '🔍', label: 'Smart Search', desc: 'Find flights', gradient: 'from-emerald-500 to-blue-500' },
                  { id: 'compare', icon: '⚖️', label: 'Compare', desc: 'AI insights', gradient: 'from-blue-500 to-indigo-500' },
                  { id: 'plan', icon: '📋', label: 'Plan', desc: 'Full itinerary', gradient: 'from-indigo-500 to-purple-500' },
                  { id: 'social', icon: '👥', label: 'Social', desc: 'Collaborate', gradient: 'from-purple-500 to-pink-500' }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`group relative px-6 py-4 rounded-2xl transition-all duration-300 font-semibold ${
                      activeTab === tab.id
                        ? 'bg-white text-gray-800 shadow-2xl scale-105'
                        : 'bg-white/20 text-white hover:bg-white/30 hover:scale-102'
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{tab.icon}</span>
                      <div className="text-left">
                        <div className="font-bold">{tab.label}</div>
                        <div className="text-xs opacity-75">{tab.desc}</div>
                      </div>
                    </div>
                    {activeTab === tab.id && (
                      <div className={`absolute inset-0 bg-gradient-to-r ${tab.gradient} opacity-10 rounded-2xl`}></div>
                    )}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Search Tab Content */}
        {activeTab === 'search' && (
          <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl border border-white/30 p-8 mb-8">
            {/* Trip Type Selection */}
            <div className="mb-8">
              <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                <span className="mr-3">🎯</span>
                How are we traveling?
              </h3>
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                {[
                  { id: 'roundtrip', icon: '↔️', label: 'Round Trip', desc: 'Most popular choice', badge: 'Popular', badgeColor: 'bg-green-500' },
                  { id: 'oneway', icon: '→', label: 'One Way', desc: 'Simple and direct' },
                  { id: 'multi', icon: '🌍', label: 'Multi-City', desc: 'Multiple destinations' },
                  { id: 'flexible', icon: '📅', label: "I'm Flexible", desc: 'Best deals finder', badge: 'Trendy', badgeColor: 'bg-purple-500' }
                ].map((type) => (
                  <button
                    key={type.id}
                    onClick={() => setTripType(type.id)}
                    className={`relative p-6 rounded-2xl border-2 transition-all duration-300 group ${
                      tripType === type.id
                        ? 'border-indigo-500 bg-gradient-to-br from-indigo-50 to-blue-50 shadow-lg scale-105'
                        : 'border-gray-200 hover:border-indigo-300 hover:shadow-md hover:scale-102'
                    }`}
                  >
                    {type.badge && (
                      <span className={`absolute -top-2 -right-2 ${type.badgeColor} text-white text-xs px-3 py-1 rounded-full font-bold shadow-lg`}>
                        {type.badge}
                      </span>
                    )}
                    <div className="text-center">
                      <div className="text-3xl mb-2">{type.icon}</div>
                      <div className="font-bold text-gray-800 mb-1">{type.label}</div>
                      <div className="text-sm text-gray-600">{type.desc}</div>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Enhanced Search Form */}
            <div className="bg-gradient-to-r from-gray-50 to-blue-50 rounded-2xl p-8 mb-8">
              <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center">
                <span className="mr-3">✈️</span>
                Flight Details
              </h3>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6 mb-6">
                {/* Origin */}
                <div className="relative">
                  <label className="block text-sm font-bold text-gray-700 mb-3">✈️ From</label>
                  <div className="relative">
                    <input
                      type="text"
                      name="origin"
                      value={searchData.origin}
                      onChange={handleInputChange}
                      placeholder="e.g., JFK, New York, NYC"
                      className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-200 focus:border-indigo-400 transition-all text-lg font-medium bg-white shadow-sm"
                    />
                    <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                      🛫
                    </div>
                  </div>
                </div>

                {/* Destination */}
                <div className="relative">
                  <label className="block text-sm font-bold text-gray-700 mb-3">🎯 To</label>
                  <div className="relative">
                    <input
                      type="text"
                      name="destination"
                      value={searchData.destination}
                      onChange={handleInputChange}
                      placeholder="e.g., LAX, Los Angeles, LA"
                      className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-200 focus:border-indigo-400 transition-all text-lg font-medium bg-white shadow-sm"
                    />
                    <button className="absolute right-4 top-1/2 transform -translate-y-1/2 text-indigo-500 hover:text-indigo-700 text-xl">
                      🎲
                    </button>
                  </div>
                </div>

                {/* Dates Section */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Helpful tip */}
                  <div className="md:col-span-2 bg-blue-50 border border-blue-200 rounded-xl p-4 mb-2">
                    <div className="flex items-center space-x-2 text-blue-700">
                      <span>💡</span>
                      <span className="text-sm font-medium">For best results, select dates at least 2 weeks in the future (July 2025 or later recommended)</span>
                    </div>
                  </div>

                  {/* Departure */}
                  <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3">📅 Departure</label>
                  <input
                    type="date"
                    name="departureDate"
                    value={searchData.departureDate}
                    onChange={handleInputChange}
                    min={new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]} // 14 days from now (more conservative)
                    max={new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]} // 1 year from now
                    className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-200 focus:border-indigo-400 transition-all text-lg font-medium bg-white shadow-sm"
                  />
                </div>

                {/* Return */}
                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3">🔄 Return</label>
                  <input
                    type="date"
                    name="returnDate"
                    value={searchData.returnDate}
                    onChange={handleInputChange}
                    disabled={tripType === 'oneway'}
                    min={searchData.departureDate || new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]} // 1 day after departure or 15 days from now
                    max={new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]} // 1 year from now
                    className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-200 focus:border-indigo-400 transition-all text-lg font-medium bg-white shadow-sm disabled:bg-gray-100"
                  />
                </div>
              </div>

              {/* Passengers & Class */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3">👤 Adults</label>
                  <select
                    name="adults"
                    value={searchData.adults}
                    onChange={handleInputChange}
                    className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-200 focus:border-indigo-400 transition-all text-lg font-medium bg-white shadow-sm"
                  >
                    {[1,2,3,4,5,6,7,8].map(num => (
                      <option key={num} value={num}>{num} Adult{num > 1 ? 's' : ''}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3">👶 Children</label>
                  <select
                    name="children"
                    value={searchData.children}
                    onChange={handleInputChange}
                    className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-200 focus:border-indigo-400 transition-all text-lg font-medium bg-white shadow-sm"
                  >
                    {[0,1,2,3,4,5,6].map(num => (
                      <option key={num} value={num}>{num} Child{num !== 1 ? 'ren' : ''}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3">💺 Class</label>
                  <select
                    name="travelClass"
                    value={searchData.travelClass}
                    onChange={handleInputChange}
                    className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-200 focus:border-indigo-400 transition-all text-lg font-medium bg-white shadow-sm"
                  >
                    <option value="ECONOMY">Economy</option>
                    <option value="PREMIUM_ECONOMY">Premium Economy</option>
                    <option value="BUSINESS">Business</option>
                    <option value="FIRST">First Class</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Smart Features Section */}
            <div className="bg-gradient-to-r from-indigo-50 via-purple-50 to-pink-50 rounded-2xl p-8 mb-8 border border-indigo-100">
              <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                <span className="mr-3">🧠</span>
                Smart Travel Features
                <span className="ml-3 bg-gradient-to-r from-indigo-500 to-purple-500 text-white text-xs px-3 py-1 rounded-full font-bold">
                  AI POWERED
                </span>
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {[
                  { 
                    key: 'sustainabilityMode', 
                    icon: '🌱', 
                    label: 'Eco-Friendly Mode', 
                    desc: 'Show carbon footprint & green options',
                    gradient: 'from-green-400 to-emerald-500'
                  },
                  { 
                    key: 'budgetIntelligence', 
                    icon: '💡', 
                    label: 'Budget Intelligence', 
                    desc: 'AI-powered cost optimization',
                    gradient: 'from-blue-400 to-indigo-500'
                  },
                  { 
                    key: 'moodBasedSuggestions', 
                    icon: '😊', 
                    label: 'Vibe Matching', 
                    desc: 'Personality-based recommendations',
                    gradient: 'from-purple-400 to-pink-500'
                  },
                  { 
                    key: 'localInsights', 
                    icon: '🏛️', 
                    label: 'Local Insights', 
                    desc: 'Insider tips & hidden gems',
                    gradient: 'from-orange-400 to-red-500'
                  },
                  { 
                    key: 'priceAlerts', 
                    icon: '📊', 
                    label: 'Price Tracking', 
                    desc: 'Smart alerts & best timing',
                    gradient: 'from-yellow-400 to-orange-500'
                  },
                  { 
                    key: 'collaborativePlanning', 
                    icon: '👥', 
                    label: 'Group Planning', 
                    desc: 'Plan together in real-time',
                    gradient: 'from-teal-400 to-blue-500'
                  }
                ].map((feature) => (
                  <label key={feature.key} className="group cursor-pointer">
                    <input
                      type="checkbox"
                      checked={smartFeatures[feature.key]}
                      onChange={() => handleSmartFeatureToggle(feature.key)}
                      className="sr-only"
                    />
                    <div className={`relative p-6 rounded-2xl border-2 transition-all duration-300 ${
                      smartFeatures[feature.key]
                        ? 'border-indigo-400 bg-white shadow-xl scale-105'
                        : 'border-gray-200 bg-white/80 hover:border-indigo-300 hover:shadow-lg hover:scale-102'
                    }`}>
                      {smartFeatures[feature.key] && (
                        <div className={`absolute inset-0 bg-gradient-to-r ${feature.gradient} opacity-10 rounded-2xl`}></div>
                      )}
                      <div className="relative">
                        <div className="flex items-center justify-between mb-3">
                          <span className="text-3xl">{feature.icon}</span>
                          <div className={`w-6 h-6 rounded-full border-2 transition-all ${
                            smartFeatures[feature.key]
                              ? 'border-indigo-500 bg-indigo-500'
                              : 'border-gray-300 group-hover:border-indigo-400'
                          }`}>
                            {smartFeatures[feature.key] && (
                              <svg className="w-4 h-4 text-white m-0.5" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              </svg>
                            )}
                          </div>
                        </div>
                        <div className="font-bold text-gray-800 mb-2">{feature.label}</div>
                        <div className="text-sm text-gray-600">{feature.desc}</div>
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* Budget Intelligence Section */}
            {smartFeatures.budgetIntelligence && (
              <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl p-8 mb-8 border border-green-200">
                <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                  <span className="mr-3">💰</span>
                  Smart Budget Distribution
                </h3>
                
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <div>
                    <label className="block text-lg font-bold text-gray-700 mb-4">Total Trip Budget</label>
                    <div className="relative">
                      <span className="absolute left-6 top-1/2 transform -translate-y-1/2 text-gray-500 text-xl">$</span>
                      <input
                        type="number"
                        value={tripBudget.total}
                        onChange={(e) => setTripBudget(prev => ({ ...prev, total: e.target.value }))}
                        placeholder="e.g., 2000"
                        className="w-full pl-12 pr-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-green-200 focus:border-green-400 transition-all text-xl font-bold bg-white shadow-sm"
                      />
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-lg font-bold text-gray-700 mb-4">AI Recommended Split</div>
                    <div className="space-y-4">
                      {Object.entries(tripBudget).filter(([key]) => key !== 'total').map(([category, percentage]) => (
                        <div key={category} className="flex items-center justify-between p-4 bg-white rounded-xl shadow-sm">
                          <div className="flex items-center space-x-3">
                            <span className="text-2xl">
                              {category === 'flights' ? '✈️' : category === 'hotels' ? '🏨' : category === 'activities' ? '🎭' : '🍽️'}
                            </span>
                            <span className="font-semibold capitalize text-gray-700">{category}:</span>
                          </div>
                          <div className="text-right">
                            <div className="font-bold text-lg">{percentage}%</div>
                            <div className="text-sm text-gray-500">
                              ${tripBudget.total ? Math.round(tripBudget.total * percentage / 100) : '0'}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Enhanced Search Buttons */}
            <div className="text-center space-y-4">
              <button
                onClick={searchFlights}
                disabled={loading.flights || !searchData.origin || !searchData.destination}
                className="group relative px-12 py-6 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 text-white rounded-2xl text-xl font-bold hover:from-indigo-700 hover:via-purple-700 hover:to-pink-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed shadow-2xl hover:shadow-3xl transform hover:scale-105 disabled:hover:scale-100"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity rounded-2xl"></div>
                {loading.flights ? (
                  <div className="flex items-center justify-center space-x-4">
                    <div className="animate-spin w-8 h-8 border-4 border-white border-t-transparent rounded-full"></div>
                    <span>Searching smart flights...</span>
                  </div>
                ) : (
                  <div className="flex items-center justify-center space-x-4">
                    <span>🚀 Search Smart Flights</span>
                    <svg className="w-6 h-6 transform group-hover:translate-x-1 transition-transform" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </button>
              
              {/* Plan Full Trip Button */}
              <button
                onClick={planTrip}
                disabled={loading.plan || !searchData.destination}
                className="group relative px-12 py-6 bg-gradient-to-r from-emerald-600 via-teal-600 to-cyan-600 text-white rounded-2xl text-xl font-bold hover:from-emerald-700 hover:via-teal-700 hover:to-cyan-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed shadow-2xl hover:shadow-3xl transform hover:scale-105 disabled:hover:scale-100"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity rounded-2xl"></div>
                {loading.plan ? (
                  <div className="flex items-center justify-center space-x-4">
                    <div className="animate-spin w-8 h-8 border-4 border-white border-t-transparent rounded-full"></div>
                    <span>Creating your itinerary...</span>
                  </div>
                ) : (
                  <div className="flex items-center justify-center space-x-4">
                    <span>🗺️ Plan Full Trip with AI</span>
                    <svg className="w-6 h-6 transform group-hover:translate-x-1 transition-transform" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </button>
            </div>
          </div>
        )}

        {/* Enhanced Compare Tab Content */}
        {activeTab === 'compare' && sortedFlights.length > 0 && (
          <div className="space-y-6">
            
            {/* Smart Recommendations */}
            {smartRecommendations.length > 0 && (
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
                  <span className="mr-3">💡</span>
                  Smart Recommendations
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {smartRecommendations.map((rec, index) => (
                    <div key={index} className="bg-white rounded-xl p-4 shadow-sm">
                      <div className="font-semibold text-gray-800 mb-1">{rec.title}</div>
                      <div className="text-sm text-gray-600">{rec.description}</div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Advanced Filters */}
            <div className="bg-white/80 backdrop-blur-lg rounded-2xl shadow-lg border border-white/30 p-6">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-2xl font-bold text-gray-800 flex items-center">
                  <span className="mr-3">⚖️</span>
                  Smart Flight Comparison
                </h3>
                <div className="text-sm text-gray-500 bg-gray-100 px-4 py-2 rounded-full">
                  {sortedFlights.length} of {flightResults.length} flights
                </div>
              </div>

              <div className="bg-gradient-to-r from-gray-50 to-blue-50 rounded-xl p-6 mb-6">
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                  
                  {/* Price Range */}
                  <div>
                    <label className="block text-xs font-bold text-gray-700 mb-2">💰 Price Range</label>
                    <div className="space-y-2">
                      <input
                        type="number"
                        placeholder="Min $"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                        value={filters.price.min}
                        onChange={(e) => setFilters(prev => ({
                          ...prev,
                          price: { ...prev.price, min: e.target.value }
                        }))}
                      />
                      <input
                        type="number"
                        placeholder="Max $"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                        value={filters.price.max}
                        onChange={(e) => setFilters(prev => ({
                          ...prev,
                          price: { ...prev.price, max: e.target.value }
                        }))}
                      />
                    </div>
                  </div>

                  {/* Stops */}
                  <div>
                    <label className="block text-xs font-bold text-gray-700 mb-2">✈️ Stops</label>
                    <select
                      value={filters.stops}
                      onChange={(e) => setFilters(prev => ({ ...prev, stops: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                    >
                      <option value="all">Any</option>
                      <option value="nonstop">Non-stop</option>
                      <option value="1stop">1 stop</option>
                      <option value="2+stops">2+ stops</option>
                    </select>
                  </div>

                  {/* Time of Day */}
                  <div>
                    <label className="block text-xs font-bold text-gray-700 mb-2">🕐 Departure</label>
                    <select
                      value={filters.timeOfDay}
                      onChange={(e) => setFilters(prev => ({ ...prev, timeOfDay: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                    >
                      <option value="all">Any time</option>
                      <option value="morning">Morning</option>
                      <option value="afternoon">Afternoon</option>
                      <option value="evening">Evening</option>
                    </select>
                  </div>

                  {/* Sustainability */}
                  <div>
                    <label className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={filters.sustainability}
                        onChange={(e) => setFilters(prev => ({ ...prev, sustainability: e.target.checked }))}
                        className="mr-2"
                      />
                      <span className="text-xs font-bold">🌱 Eco-friendly</span>
                    </label>
                  </div>

                  {/* Sort Options */}
                  <div>
                    <label className="block text-xs font-bold text-gray-700 mb-2">📊 Sort by</label>
                    <select 
                      value={filters.sortBy}
                      onChange={(e) => setFilters(prev => ({ ...prev, sortBy: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                    >
                      <option value="price">Best Price</option>
                      <option value="duration">Shortest</option>
                      <option value="sustainability">Most Eco</option>
                      <option value="departure">Departure</option>
                    </select>
                  </div>

                  {/* Reset */}
                  <div className="flex items-end">
                    <button
                      onClick={() => setFilters({
                        price: { min: '', max: '' },
                        stops: 'all',
                        timeOfDay: 'all',
                        sustainability: false,
                        sortBy: 'price'
                      })}
                      className="w-full px-3 py-2 bg-gray-200 text-gray-700 rounded-lg text-sm hover:bg-gray-300 transition-all font-medium"
                    >
                      🔄 Reset
                    </button>
                  </div>
                </div>
              </div>

              {/* Enhanced Flight Results */}
              <div className="space-y-6">
                {sortedFlights.map((flight, index) => (
                  <div key={index} className="group bg-white border border-gray-200 rounded-2xl p-6 hover:shadow-2xl transition-all duration-300 hover:border-indigo-300 cursor-pointer transform hover:scale-102">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        
                        {/* Airline Header */}
                        <div className="flex items-center justify-between mb-6">
                          <div className="flex items-center space-x-4">
                            <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-2xl flex items-center justify-center text-white font-bold text-xl shadow-lg">
                              {flight.airline_names?.[0]?.substring(0, 2) || 'FL'}
                            </div>
                            <div>
                              <div className="font-bold text-xl text-gray-800">
                                {flight.airline_names?.join(', ') || `Flight ${index + 1}`}
                              </div>
                              <div className="text-sm text-gray-600">
                                {flight.validating_airline_codes?.join(', ') || 'Various Airlines'}
                              </div>
                            </div>
                          </div>
                          
                          {/* Flight Badges */}
                          <div className="flex flex-wrap gap-2">
                            <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                              flight.stops === 0 
                                ? 'bg-green-100 text-green-700' 
                                : flight.stops === 1 
                                  ? 'bg-yellow-100 text-yellow-700'
                                  : 'bg-red-100 text-red-700'
                            }`}>
                              {flight.stops === 0 ? '🔵 Direct' : `🔸 ${flight.stops} Stop${flight.stops > 1 ? 's' : ''}`}
                            </span>
                            
                            {smartFeatures.sustainabilityMode && flight.sustainability_score && (
                              <span className={`px-3 py-1 rounded-full text-xs font-bold ${getSustainabilityColor(flight.sustainability_score)}`}>
                                🌱 {flight.sustainability_score}% Eco
                              </span>
                            )}
                            
                            {smartFeatures.budgetIntelligence && flight.budget_fit && (
                              <span className={`px-3 py-1 rounded-full text-xs font-bold ${getBudgetFitColor(flight.budget_fit)}`}>
                                💰 {flight.budget_fit.replace('_', ' ')}
                              </span>
                            )}
                          </div>
                        </div>
                        
                        {/* Flight Timeline */}
                        <div className="grid grid-cols-1 lg:grid-cols-5 gap-6 items-center mb-6">
                          <div className="text-center lg:text-left">
                            <div className="text-3xl font-bold text-gray-800 mb-1">
                              {flight.departure_time || 'TBD'}
                            </div>
                            <div className="text-lg font-semibold text-gray-600">{searchData.origin}</div>
                            <div className="text-sm text-gray-500">Departure</div>
                          </div>
                          
                          <div className="text-center col-span-1 lg:col-span-2">
                            <div className="flex items-center justify-center space-x-3 mb-2">
                              <div className="w-4 h-4 bg-indigo-500 rounded-full"></div>
                              <div className="flex-1 h-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 rounded-full"></div>
                              {flight.stops > 0 && (
                                <>
                                  <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                  <div className="flex-1 h-1 bg-gradient-to-r from-yellow-500 to-pink-500 rounded-full"></div>
                                </>
                              )}
                              <div className="w-4 h-4 bg-pink-500 rounded-full"></div>
                            </div>
                            <div className="text-lg font-semibold text-gray-700">
                              {flight.formatted_duration || formatDuration(flight.duration)}
                            </div>
                            <div className="text-sm text-gray-500">Flight time</div>
                          </div>
                          
                          <div className="text-center lg:text-right">
                            <div className="text-3xl font-bold text-gray-800 mb-1">
                              {flight.arrival_time || 'TBD'}
                            </div>
                            <div className="text-lg font-semibold text-gray-600">{searchData.destination}</div>
                            <div className="text-sm text-gray-500">Arrival</div>
                          </div>
                        </div>
                        
                        {/* Carbon & Mood Info */}
                        {(smartFeatures.sustainabilityMode || smartFeatures.moodBasedSuggestions) && (
                          <div className="bg-gradient-to-r from-gray-50 to-blue-50 rounded-xl p-4 mb-4">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                              {smartFeatures.sustainabilityMode && flight.carbon_footprint && (
                                <div>
                                  <div className="text-lg font-bold text-gray-800">{flight.carbon_footprint} kg</div>
                                  <div className="text-sm text-gray-600">CO₂ emissions</div>
                                </div>
                              )}
                              {smartFeatures.moodBasedSuggestions && flight.mood_score && (
                                <div>
                                  <div className="text-lg font-bold text-gray-800">{flight.mood_score}%</div>
                                  <div className="text-sm text-gray-600">Vibe match</div>
                                </div>
                              )}
                              {smartFeatures.budgetIntelligence && flight.budget_fit && (
                                <div>
                                  <div className="text-lg font-bold text-gray-800 capitalize">{flight.budget_fit.replace('_', ' ')}</div>
                                  <div className="text-sm text-gray-600">Budget fit</div>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* Price & Actions */}
                      <div className="text-right ml-6">
                        <div className="text-4xl font-bold text-indigo-600 mb-2">
                          {formatPrice(flight.price)}
                        </div>
                        <div className="text-sm text-gray-500 mb-4">per person</div>
                        
                        <div className="space-y-3">
                          <button
                            onClick={() => {
                              setSelectedFlightForDetails(flight);
                              setShowFlightDetails(true);
                            }}
                            className="w-full bg-indigo-100 text-indigo-700 px-6 py-3 rounded-xl hover:bg-indigo-200 transition-all font-semibold"
                          >
                            🔍 View Details
                          </button>
                          <button className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-6 py-3 rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
                            ✈️ Select Flight
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Trip Planning Results */}
        {activeTab === 'plan' && tripPlanResults && (
          <div className="space-y-8">
            <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl border border-white/30 p-8">
              <div className="text-center mb-8">
                <h3 className="text-3xl font-bold text-gray-800 mb-4">
                  🎯 Your Complete Trip Plan
                </h3>
                <p className="text-xl text-gray-600">
                  AI-powered itinerary with real places, activities, and local insights
                </p>
              </div>

              <EnhancedItinerary 
                itinerary={tripPlanResults.itinerary} 
                nearbyPlaces={tripPlanResults.places || tripPlanResults.nearby_places} 
              />

              {/* Trip Summary */}
              {tripPlanResults.summary && (
                <div className="mt-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                  <h4 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
                    <span className="mr-3">📊</span>
                    Trip Summary
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    {tripPlanResults.summary.total_cost && (
                      <div className="bg-white rounded-xl p-4 text-center">
                        <div className="text-2xl font-bold text-green-600">{tripPlanResults.summary.total_cost}</div>
                        <div className="text-gray-600">Estimated Total</div>
                      </div>
                    )}
                    {tripPlanResults.summary.duration && (
                      <div className="bg-white rounded-xl p-4 text-center">
                        <div className="text-2xl font-bold text-blue-600">{tripPlanResults.summary.duration}</div>
                        <div className="text-gray-600">Trip Duration</div>
                      </div>
                    )}
                    {tripPlanResults.summary.activities_count && (
                      <div className="bg-white rounded-xl p-4 text-center">
                        <div className="text-2xl font-bold text-purple-600">{tripPlanResults.summary.activities_count}</div>
                        <div className="text-gray-600">Activities Planned</div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Coming Soon - Social Planning Only */}
        {activeTab === 'social' && (
          <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl border border-white/30 p-12 text-center">
            <div className="text-8xl mb-6">👥</div>
            <h3 className="text-3xl font-bold text-gray-800 mb-4">
              Social Planning Coming Soon!
            </h3>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Plan trips with friends, share itineraries, and collaborate in real-time.
            </p>
          </div>
        )}

        {/* Plan Tab - No Results Yet */}
        {activeTab === 'plan' && !tripPlanResults && (
          <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl border border-white/30 p-12 text-center">
            <div className="text-8xl mb-6">🗺️</div>
            <h3 className="text-3xl font-bold text-gray-800 mb-4">
              Ready to Plan Your Trip?
            </h3>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto mb-8">
              Click the "Plan Full Trip with AI" button above to generate a complete itinerary with attractions, restaurants, and local experiences.
            </p>
            <div className="flex justify-center">
              <button
                onClick={() => setActiveTab('search')}
                className="px-8 py-3 bg-gradient-to-r from-emerald-600 to-teal-600 text-white rounded-xl font-medium hover:from-emerald-700 hover:to-teal-700 transition-all"
              >
                ← Back to Search
              </button>
            </div>
          </div>
        )}

        {/* Error Display */}
        {error && (
          <div className="bg-red-50 border-2 border-red-200 rounded-2xl p-6 mb-8">
            <div className="flex items-center space-x-4">
              <span className="text-3xl">😅</span>
              <div>
                <h4 className="font-bold text-red-800 text-lg">Oops, something went wrong!</h4>
                <span className="text-red-700">{error}</span>
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Flight Details Modal */}
        {showFlightDetails && selectedFlightForDetails && (
          <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-3xl max-w-5xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
              <div className="bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 text-white p-8 rounded-t-3xl">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-3xl font-bold mb-2">✈️ Flight Details</h3>
                    <p className="text-blue-100 text-lg">
                      {selectedFlightForDetails.airline_names?.join(', ') || 'Flight Information'}
                    </p>
                  </div>
                  <button
                    onClick={() => setShowFlightDetails(false)}
                    className="text-white hover:text-gray-200 text-3xl font-bold w-12 h-12 flex items-center justify-center rounded-full hover:bg-white/20 transition-all"
                  >
                    ×
                  </button>
                </div>
              </div>

              <div className="p-8">
                <div className="text-center text-gray-500">
                  <div className="text-6xl mb-6">✈️</div>
                  <h4 className="text-2xl font-bold text-gray-800 mb-2">Detailed Flight Information</h4>
                  <p className="text-lg">Complete segment details, baggage info, and booking options coming soon!</p>
                </div>
              </div>
            </div>
          </div>
        )}
        </div>
      </div>
    </div>
  );
};

export default TripMode;